{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react'; //write a custom hook (function)\n\nconst useForm = (submit, validation) => {\n  _s();\n\n  //where do i need submit and validation functions?\n  const [values, setValues] = useState({\n    //declare a hook\n    username: '',\n    email: '',\n    password: ''\n  });\n  const [error, setError] = useState({}); //declare another hook\n\n  useEffect(() => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: 'steph',\n        email: 'sune@yahoo.com',\n        password: '1234'\n      })\n    };\n    fetch('http://localhost:3000/api/user/register', requestOptions).then(response => response.json()).then(console.log(res));\n  }, [handleSubmit]);\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setValues({ ...values,\n      //important.spread all the fields(copy the whole object),then overwrite the name field.otherwise it will only display name.\n      [name]: value\n    });\n  };\n\n  const handleSubmit = e => {\n    //we need to build API to pass it to the server side.\n    e.preventDefault();\n    setError(validation(values)); //update error\n    //submit();\n  };\n\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n    error\n  };\n};\n\n_s(useForm, \"JppOZ2x8R8eByILfWoDlExkY20E=\");\n\nexport default useForm;","map":{"version":3,"sources":["/Users/stephanie/Desktop/programming/full-auth/auth-frontend/src/useForm.js"],"names":["React","useState","useEffect","useForm","submit","validation","values","setValues","username","email","password","error","setError","requestOptions","method","headers","body","JSON","stringify","name","fetch","then","response","json","console","log","res","handleSubmit","handleChange","e","value","target","preventDefault"],"mappings":";;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC,C,CAEA;;AACA,MAAMC,OAAO,GAAC,CAACC,MAAD,EAAQC,UAAR,KAAqB;AAAA;;AAC/B;AACA,QAAM,CAACC,MAAD,EAAQC,SAAR,IAAmBN,QAAQ,CAAC;AAAE;AAChCO,IAAAA,QAAQ,EAAC,EADqB;AAE9BC,IAAAA,KAAK,EAAC,EAFwB;AAG9BC,IAAAA,QAAQ,EAAC;AAHqB,GAAD,CAAjC;AAKA,QAAM,CAACC,KAAD,EAAOC,QAAP,IAAiBX,QAAQ,CAAC,EAAD,CAA/B,CAP+B,CAOI;;AACnCC,EAAAA,SAAS,CAAC,MAAI;AACV,UAAMW,cAAc,GAAC;AACjBC,MAAAA,MAAM,EAAC,MADU;AAEjBC,MAAAA,OAAO,EAAC;AAAC,wBAAe;AAAhB,OAFS;AAGjBC,MAAAA,IAAI,EAACC,IAAI,CAACC,SAAL,CAAe;AAChBC,QAAAA,IAAI,EAAC,OADW;AAEhBV,QAAAA,KAAK,EAAC,gBAFU;AAGhBC,QAAAA,QAAQ,EAAC;AAHO,OAAf;AAHY,KAArB;AASAU,IAAAA,KAAK,CAAC,yCAAD,EAA2CP,cAA3C,CAAL,CACCQ,IADD,CACMC,QAAQ,IAAEA,QAAQ,CAACC,IAAT,EADhB,EAECF,IAFD,CAEMG,OAAO,CAACC,GAAR,CAAYC,GAAZ,CAFN;AAGH,GAbQ,EAaP,CAACC,YAAD,CAbO,CAAT;;AAeA,QAAMC,YAAY,GAACC,CAAC,IAAE;AACnB,UAAM;AAACV,MAAAA,IAAD;AAAOW,MAAAA;AAAP,QAAcD,CAAC,CAACE,MAAtB;AACCxB,IAAAA,SAAS,CAAC,EACN,GAAGD,MADG;AACI;AACV,OAACa,IAAD,GAAOW;AAFD,KAAD,CAAT;AAIH,GAND;;AAOA,QAAMH,YAAY,GAACE,CAAC,IAAE;AAAC;AACnBA,IAAAA,CAAC,CAACG,cAAF;AACApB,IAAAA,QAAQ,CAACP,UAAU,CAACC,MAAD,CAAX,CAAR,CAFkB,CAEU;AAC5B;AACF,GAJF;;AAKC,SAAO;AACHsB,IAAAA,YADG;AAEHD,IAAAA,YAFG;AAGHrB,IAAAA,MAHG;AAIHK,IAAAA;AAJG,GAAP;AAMJ,CAzCD;;GAAMR,O;;AA0CN,eAAeA,OAAf","sourcesContent":["import React,{useState,useEffect} from 'react'\n\n//write a custom hook (function)\nconst useForm=(submit,validation)=>{\n    //where do i need submit and validation functions?\n    const [values,setValues]=useState({ //declare a hook\n        username:'',\n        email:'',\n        password:''\n    });\n    const [error,setError]=useState({})//declare another hook\n    useEffect(()=>{\n        const requestOptions={\n            method:'POST',\n            headers:{'Content-Type':'application/json'},\n            body:JSON.stringify({\n                name:'steph',\n                email:'sune@yahoo.com',\n                password:'1234'\n            })\n        };\n        fetch('http://localhost:3000/api/user/register',requestOptions)\n        .then(response=>response.json())\n        .then(console.log(res));\n    },[handleSubmit])\n\n    const handleChange=e=>{\n       const {name, value}=e.target;\n        setValues({ \n            ...values,//important.spread all the fields(copy the whole object),then overwrite the name field.otherwise it will only display name.\n            [name]:value\n        })\n    }\n    const handleSubmit=e=>{//we need to build API to pass it to the server side.\n        e.preventDefault();\n        setError(validation(values))//update error\n        //submit();\n     }\n     return {\n         handleChange,\n         handleSubmit,\n         values,\n         error\n     }\n}\nexport default useForm;"]},"metadata":{},"sourceType":"module"}